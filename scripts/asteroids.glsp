(let :red '(255, 0, 0, 255))
(let :black '(0, 0, 0, 255))
(let :white '(255, 255, 255, 255))
(let :green '(0, 255, 0, 255))
(let :yellow '(255, 255, 0, 255))

(defn wrap-around (vec : (is? vec Vec2)) ; todo: check for i32 or f32 in vec
  (let vr (.copy vec))
  (let (width height) (screen-size)) ; (f32 f32) returned
  (cond
    ((> [vr 'x] width)
      (= [vr 'x] 0.0))
    ((< [vr 'x] 0.0)
      (= [vr 'x] width))
    ((> [vr 'y] height)
      (= [vr 'y] 0.0))
    ((< [vr 'y] 0.0)
      (= [vr 'y] height)))
  (return vr))

(defclass Ship
  (const vis-height 28.0)
  (const vis-base 18.0)
  (const rot-speed 5.0)

  (field pos)
  (field rot)
  (field vel)

  (field last-shot)
  (field shot-interval 0.2)

  (init ()
    (@reset))

  (met reset ()
    ; spawn in the middle of the screen
    (let (w h) (screen-size))
    (= @pos (Vec2 (/ w 2) (/ h 2)))
    (= @rot 0.0)
    (= @vel (.zero Vec2))
    (= @last-shot 0.0))

  (met update (dt, sst, game) ; delta time = dt, since start time = sst
    ; handle acceleration input & logic
    (let acc (.copy @vel))
    (.neg acc)
    (.div-val acc 10.0)
    (when (down? 'key:up)
      (let dir (Vec2 (sin @rot) (- (cos @rot))))
      (.div-val dir 3.0)
      (= acc dir))

    (.add-vec @vel acc)
    
    ; constrain max speed
    (let max-speed 5.0)
    (when (> (.length @vel) max-speed)
      (.normalize @vel)
      (.mul-val @vel max-speed))

    ; handle rotation input
    (when (down? 'key:right)
      (inc! @rot (* dt @rot-speed)))
    (when (down? 'key:left)
      (dec! @rot (* dt @rot-speed)))
    
    ; handle fire input & shot if button pressed and shot interval is satisfied
    (when (and (down? 'key:space) (> (- sst @last-shot) @shot-interval))
      ; update when last shot
      (= @last-shot sst)

      ; create bullet
      (let rot (Vec2 (sin @rot) (- (cos @rot))))

      (let vel (.copy rot))
      (.mul-val vel [Bullet 'speed]) ; ship rot dir by bullet's constant speed

      (let pos (.copy @pos))
      (.mul-val rot (/ @vis-height 2.0))
      (.add-vec pos rot)

      (let bullet (Bullet pos vel sst))
      (.add-bullet game bullet))

    ; simple movement
    (.add-vec @pos @vel)
    
    ; wrap around the screen
    (= @pos (wrap-around @pos)))

  (met draw ()
    (let [(x px) (y py)] @pos)
    (let ship-height-x (* (sin @rot) (/ @vis-height 2.0)))
    (let ship-height-y (* (cos @rot) (/ @vis-height 2.0)))
    (let ship-base-x (* (cos @rot) (/ @vis-base 2.0)))
    (let ship-base-y (* (sin @rot) (/ @vis-base 2.0)))
    (let v1 (Vec2
      (+ px ship-height-x) (- py ship-height-y)))
    (let v2 (Vec2
      (- (- px ship-base-x) ship-height-x)
      (+ (- py ship-base-y) ship-height-y)))
    (let v3 (Vec2
      (- (+ px ship-base-x) ship-height-x)
      (+ (+ py ship-base-y) ship-height-y)))
    (draw-triangle-lines
      (.split v1)
      (.split v2)
      (.split v3)
      5.0
      :green)))

(defclass Bullet
  (const speed 7.0)
  (const lifetime 1.5)

  (field pos)
  (field vel)
  (field shot-at)
  (field collided #f)

  (init (@pos @vel @shot-at))

  (met ranout? (cur-t)
    (> (+ @shot-at @lifetime) cur-t))

  (met update (dt)
    (.add-vec @pos @vel))

  (met draw ()
    (let [x y] @pos)
    (draw-circle x y 2.0 :red)))

(defclass Asteroid
  (field rot-speed (rand -2.0 2.0))
  (field size (rand 20.0 80.0))
  (field sides (rand 3 7))

  (field pos)
  (field rot)
  (field vel)
  (field collided #f)

  (init (@pos @vel (? size) (? sides))
    (= @rot 0.0)
    (unless (eq? size #n)
      (= @size size))
    (unless (eq? sides #n)
      (= @sides sides)))

  (met update (dt)
    (inc! @rot @rot-speed)
    (.add-vec @pos @vel)
    (= @pos (wrap-around @pos)))

  (met draw ()
    (let [x y] @pos)
    (draw-poly-lines x y @sides @size @rot 2.0 :yellow)))

#|
state hierarchy for Game is:
  (fsm
    (state* Waiting)  ; like a menu screen
    (state Playing)   ; gameplay
    (state GameOver)) ; score screen
|#

(defclass Game
  (field player)
  (field bullets)
  (field asteroids) ; array of asteroid class

  (init ()
    (@reset))

  (met reset ()
    (= @player (Ship))
    (= @bullets (arr))
    (= @asteroids (arr)))

  ; by default spawn some asteroids
  (met init-asteroids (n)
    (let (w h) (screen-size))
    (forn (_ n)
      (let pos (Vec2 (rand w) (rand h)))
      (let vel (Vec2 (rand -1.0 1.0) (rand -1.0 1.0)))
      (push! @asteroids (Asteroid pos vel))))

  (met spawn-some-asteroids ()
    (let (w h) (screen-size))
    (let pos (Vec2 (rand w (- w 10.0)) (rand h (- h 10.0))))
    (let vel (Vec2 (rand -1.0 1.0) (rand -1.0 1.0)))
    (push! @asteroids (Asteroid pos vel)))

  (met add-bullet (bullet : (is? bullet Bullet))
    (push! @bullets bullet))

  (met update (dt, sst))

  (met draw ())

  (fsm
    ; main screen menu
    (state* Waiting
      (wrap Main:update (dt, sst)
        (when (pressed? 'key:enter)
          (@init-asteroids 10)
          (@enab! 'Playing)
          (return)))

      (wrap Main:draw ()
        (let font-size 30.0)
        (let (w h) (screen-size))
        (draw-text "Best game ever!" (/ w 2.5) (/ h 2.2) font-size :white)
        (draw-text "Press enter." (/ w 2.4) (/ h 2) font-size :white))),

    ; gameplay
    (state Playing
      ; checks for collision and mark entities for deletion
      ; also marks destructable asteroids
      (met physics (marked-asteroids)
        (for (idx ast) in (enumerate @asteroids)
          ; player collision with asteroids
          (let ast-pos (.copy [ast 'pos]))
          (.sub-vec ast-pos [@player 'pos])
          (when (< (.length ast-pos) (+ [ast 'size] (/ [@player 'vis-height] 3)))
            (@enab! 'GameOver)
            (return)) ; after enabling another state return from fn to stop execution and prevent crash

          ; asteroid and bullet collision
          (for bul in @bullets
            (let ast-pos (.copy [ast 'pos]))
            (.sub-vec ast-pos [bul 'pos])
            (when (< (.length ast-pos) [ast 'size])
              (dbg (.length ast-pos))
              ; mark destructable asteroids
              (when (> [ast 'sides] 4)
                (push! marked-asteroids idx))
              ; set collided to true
              (= [ast 'collided] #t)
              (= [bul 'collided] #t))),))

      (wrap Main:update (dt, sst)
        ; process physics (collisions)
        (let marked-asteroids (arr))
        (@physics marked-asteroids)

        ; create small asteroids at marked destructable asteroids
        (let new-asteroids (arr))
        (for midx in marked-asteroids
          (let ast [@asteroids midx])
          (let new-size (* [ast 'size] 0.8))
          (let new-pos1 (.copy [ast 'pos]))
          (.add-val new-pos1 (/ new-size 2.0))
          (dbg [new-pos1 'x] [new-pos1 'y])
          (let new-pos2 (.copy [ast 'pos]))
          (.add-val new-pos2 (- (/ new-size 2.0)))
          (dbg [new-pos2 'x] [new-pos2 'y])
          (let new-sides (- [ast 'sides] 1))
          (let new-vel1 (.copy [ast 'vel]))
          (mul! [new-vel1 'x] (rand-pick 1 -1))
          (mul! [new-vel1 'y] (rand-pick 1 -1))
          (let new-vel2 (.copy [ast 'vel]))
          (mul! [new-vel2 'x] (rand-pick 1 -1))
          (mul! [new-vel2 'y] (rand-pick 1 -1))

          (let first (Asteroid new-pos1 new-vel1 new-size new-sides))
          (let second (Asteroid new-pos2 new-vel2 new-size new-sides))
          (push! new-asteroids first)
          (push! new-asteroids second))

        ; kill all unrelevant entities
        (retain! (fn1 (.ranout? _ sst)) @bullets) ; _ is a bullet, just check fn1 in reference
        (retain! (fn1 (eq? [_ 'collided] #f)) @bullets)
        (retain! (fn1 (eq? [_ 'collided] #f)) @asteroids)

        ; after the old asteroid and bullet killed spawn new smaller asteroids
        (for ast in new-asteroids
          (push! @asteroids ast))

        ; yielding spawn for asteroids

        ; if len of asteroids is getting smaller spawn new incoming from screen sides
        (when (< (len @asteroids) 10)
          (@spawn-some-asteroids))

        ; update player's logic
        (.update @player dt sst @self)

        ; update bullets logic
        (for bul in @bullets
          (.update bul dt))

        ; update asteroids logic
        (for ast in @asteroids
          (.update ast dt)))

      (wrap Main:draw ()
        ; draw bullets
        (for bul in @bullets
          (.draw bul))

        ; draw asteroids
        (for ast in @asteroids
          (.draw ast))
          
        ; draw player
        (.draw @player))),

    ; score screen
    (state GameOver
      (const s-to-skip 1.0)
      (field timer 0.0) ; to not to skip accidentally

      (wrap Main:update (dt, sst)
        (inc! @timer dt)

        (when (>= @timer @s-to-skip)
          (when (any? pressed? '(key:enter key:up key:down key:right key:left))
            (@reset)
            (@enab! 'Waiting)
            (return))))

      (wrap Main:draw ()
        (let font-size 30.0)
        (let (w h) (screen-size))
        (draw-text "Your score is: 0!" (/ w 2.5) (/ h 2.2) font-size :white)
        (when (>= @timer @s-to-skip)
          (draw-text "Press any key." (/ w 2.4) (/ h 2) font-size :white))
        (return))),))

(def game (Game))

(defn engine:update (dt)
  (let sst (get-time)) ; time since start
  (.update game dt sst))

(defn engine:draw ()
  (clear-background :black)
  (.draw game))