(let :red '(255, 0, 0, 255))
(let :black '(0, 0, 0, 255))
(let :white '(255, 255, 255, 255))
(let :green '(0, 255, 0, 255))
(let :yellow '(255, 255, 0, 255))

(defstruct Circle
  x y s r

  (met overlaps? (other-circle)
    (let [x y r] other-circle)
    (let rr (+ @r r))
    (let dx (- @x x))
    (let dy (- @y y))
    (> (pow rr 2) (+ (pow dx 2) (pow dy 2))))
  
  (met draw (color)
    (draw-circle @x @y @r color)))

(def first-circle (Circle
  (x 10.0)
  (y 10.0)
  (s 50.0)
  (r 30.0)))

(def player-color :white)
(def player-circle (Circle
  (x 90.0)
  (y 90.0)
  (s 50.0)
  (r 30.0)))

(defn engine:update (dt)
  ; just move first circle
  (let speed [first-circle 's])
  (inc! [first-circle 'x] (* dt speed))
  (inc! [first-circle 'y] (* dt speed))

  ; check for overlapping and change color
  (cond
    ((.overlaps? first-circle player-circle)
      (= player-color :yellow)) ; overlapped
    (else
      (= player-color :white))) ; not

  ; move player position based on input
  (let speed [player-circle 's])
  (when (down? 'key:up)
    (dec! [player-circle 'y] (* dt speed)))
  (when (down? 'key:down)
    (inc! [player-circle 'y] (* dt speed)))
  (when (down? 'key:right)
    (inc! [player-circle 'x] (* dt speed)))
  (when (down? 'key:left)
    (dec! [player-circle 'x] (* dt speed)))

  ; change radius based on input
  (when (pressed? 'key:f)
    (inc! [player-circle 'r] 1.0))
  (when (pressed? 'key:r)
    (dec! [player-circle 'r] 1.0))
)

(defn engine:draw ()
  (clear-background :black)

  (.draw player-circle player-color)
  (.draw first-circle :green)

  (draw-text "Hi" 30.0 30.0 30.0 :white))
