(let :red '(255, 0, 0, 255))
(let :black '(0, 0, 0, 255))
(let :white '(255, 255, 255, 255))
(let :green '(0, 255, 0, 255))
(let :yellow '(255, 255, 0, 255))
(let :blue '(0, 0, 255, 255))

(let-fn draw-text-centerx (text : str?, y : flo?, font-size : flo?)
  (let (w h) (screen-size))
  (let td (measure-text text (int font-size) 1.0))
  (draw-text text (- (/ w 2) (/ [td 'width] 2)) y font-size :white))

(defclass Block
  (const width 20.0)
  (const height 10.0)

  (field pos)

  (init (@pos))

  (met ball-collided? (ball : (is? ball Ball))
    (let [(x bx) (y by)] [ball 'pos])
    (let [(x px) (y py)] @pos)
    (cond 
      ((and (<= bx (+ px @width)) (>= bx px) (>= by py) (<= by (+ py @height))) #t)
      (else #f)),)

  (met update (dt, sst))

  (met draw ()
    (draw-rectangle [@pos 'x] [@pos 'y] @width @height :blue)))

(defclass Platform
  (const width 60.0)
  (const height 10.0)
  (const speed 500.0)

  (field pos)

  (init ()
    (let x (/ [ArkanoidGame 'width] 2.0))
    (let y [ArkanoidGame 'height])
    (= @pos (Vec2 x y)))

  (met ball-collided? (ball : (is? ball Ball))
    (let [(x bx) (y by)] [ball 'pos])
    (let [(x px) (y py)] @pos)
    (cond 
      ((and (<= bx (+ px @width)) (>= bx px) (>= by py)) #t)
      (else #f)),)

  (met update (dt, sst)
    (let (sw sh) (arr [ArkanoidGame 'width] [ArkanoidGame 'height]))
    (when (down? 'key:right)
      (inc! [@pos 'x] (* @speed dt)))
    (when (down? 'key:left)
      (dec! [@pos 'x] (* @speed dt)))

    (when (> [@pos 'x] (- sw @width))
      (= [@pos 'x] (- sw @width)))
    (when (< [@pos 'x] 0.0)
      (= [@pos 'x] 0.0)))

  (met draw ()
    (draw-rectangle [@pos 'x] [@pos 'y] @width @height :green)))

(defclass Ball
  (const rad 7.0)
  (field pos)
  (field vel)
  (field stick #t)
  (field lose #f)

  (init ()
    (= @pos (.zero Vec2))
    (= @vel (.zero Vec2)))

  (met sticked? ()
    (eq? @stick #t))

  (met lost? ()
    (eq? @lose #t))

  (met update (dt, sst)
    (when (eq? @stick #f)
      (.add-vec! @pos @vel))
    
    ; check for borders
    (let offset [ArkanoidGame 'boffset])
    (when (< [@pos 'x] (+ 0.0 (* offset 2.0))) ; left
      (neg! [@vel 'x]))
    (when (> [@pos 'x] (- [ArkanoidGame 'width] (* offset 2.0))) ; right
      (neg! [@vel 'x]))
    (when (< [@pos 'y] (+ 0.0 (* offset 2.0))) ; top
      (neg! [@vel 'y]))
    (when (> [@pos 'y] (+ [ArkanoidGame 'height] (* offset 2.0))) ; bottom
      (= @lose #t)))

  (met draw ()
    (let (x y) (.split @pos))
    (draw-circle x y @rad :red)))

#|
state hierarchy for Game is:
  (fsm
    (state* Waiting)  ; like a menu screen
    (state Playing)   ; gameplay
    (state GameOver)) ; score screen
|#

(defclass ArkanoidGame
  (const boffset 5.0)
  (const width 400.0)
  (const height 400.0)

  (field score)
  (field ball)
  (field platform)
  (field blocks)

  (init ()
    (@reset))

  (met setup-ui-cam ()
    (set-default-camera))

  (met setup-game-cam ()
    (let cam (Camera2D))
    (let scale 0.8)
    (let zoom (Vec2 (/ 1.0 (* @width scale)) (- (/ 1.0 (* @height scale)))))
    (let target (Vec2 (/ @width 2.0) (/ @height 2.0)))
    (= [cam 'zoom] (.split zoom))
    (= [cam 'target] (.split target))
    (set-camera cam))

  (met reset ()
    ; setup score
    (= @score 0)

    ; setup platform
    (= @platform (Platform))
    
    ; setup ball
    (= @ball (Ball))
    
    ; setup blocks
    (= @blocks (arr))
    (let step-x (/ [Block 'width] 2))
    (let max-x (/ (- @width step-x) (+ [Block 'width] step-x)))
    (= max-x (round max-x))

    (let step-y (/ [Block 'height] 1.0))
    (let max-y (/ (- (/ @height 2.0) step-y) (+ [Block 'height] step-y)))
    (= max-y (round max-y))

    (forn (iy max-y)
      (forn (ix max-x)
        (let x (* ix (+ [Block 'width] step-x)))
        (let y (* iy (+ [Block 'height] step-y)))
        (let pos (Vec2 (+ x step-x) (+ y step-y)))
        (let b (Block pos))
        (push! @blocks b))),)

  (met update (dt, sst))
  (met draw ())

  (fsm
    (state* Waiting
      (wrap Main:update (dt, sst)
        (when (pressed? 'key:enter)
          (@enab! 'Playing)
          (return))),

      (wrap Main:draw ()
        (let font-size 30.0)
        (let (w h) (screen-size))
        (draw-text-centerx "Arkanoid" (/ h 2.2) font-size)
        (draw-text-centerx "Press enter." (/ h 2) font-size)),)

    (state Playing
      (wrap Main:update (dt, sst)
        (.update @platform dt sst)
        (.update @ball dt sst)

        ; snap ball to platform
        (when (.sticked? @ball)
          (let [(x px) (y py)] [@platform 'pos])
          (let ph [Platform 'height])
          (let pw (/ [Platform 'width] 2.0))
          (let ball-pos (Vec2 (+ px pw) (- py [Ball 'rad])))
          (= [@ball 'pos] ball-pos))

        ; on space unsnap it and let move
        (when (and (pressed? 'key:space) (.sticked? @ball))
          (let dir (Vec2 (rand -1.0 1.0) -1.0))
          (.mul-val! dir 5.0)
          (= [@ball 'vel] dir)
          (= [@ball 'stick] #f))

        ; collision ball and platform
        (when (.ball-collided? @platform @ball) (neg! [[@ball 'vel] 'y]))

        ; collision ball and blocks
        (for (idx b) in (enumerate @blocks)
          (when (.ball-collided? b @ball)
            (neg! [[@ball 'vel] 'y])
            (inc! @score)
            (del! @blocks idx)))

        ; check for lose
        (when (.lost? @ball)
          (dec! @score 5)
          (= [@ball 'stick] #t)
          (= [@ball 'lose] #f))
          
        ; win if no more blocks
        ; lose if score is negative
        (when (or (== (len @blocks) 0) (< @score 0))
          (@enab! 'GameOver)
          (return)))

      (wrap Main:draw ()
        (clear-background :black)

        ; render game
        (@setup-game-cam)

        ; borders
        (draw-rectangle 0.0 0.0 @width @height :yellow)
        (draw-rectangle @boffset @boffset (- @width (* @boffset 2.0)) (- @height (* @boffset 2.0)) :black)

        ; blocks
        (for b in @blocks
          (.draw b))

        ; platform
        (.draw @platform)

        ; ball
        (.draw @ball)
        
        ; render ui
        (@setup-ui-cam)
        (draw-text "Score: {@score}" 30.0 30.0 30.0 :white)),)

    (state GameOver
      (const s-to-skip 1.0)
      (field timer 0.0) ; to not to skip accidentally

      (wrap Main:update (dt, sst)
        (inc! @timer dt)

        (when (>= @timer @s-to-skip)
          (when (any? pressed? '(key:enter key:space))
            (@reset)
            (@enab! 'Waiting)
            (return))))

      (wrap Main:draw ()
        (let font-size 30.0)
        (let (w h) (screen-size))

        ; lose if score is negativ
        (when (< @score 0)
          (draw-text-centerx "You lose!" (/ h 2) font-size)
          (draw-text-centerx "Final score: {@score}" (/ h 1.8) font-size))

        ; win if no more blocks
        (when (== (len @blocks) 0)
          (draw-text-centerx "You win!" (/ h 2) font-size)
          (draw-text-centerx "Final score: {@score}" (/ h 1.8) font-size))

        (when (>= @timer @s-to-skip)
          (draw-text-centerx "Press enter or space!" (/ h 1.5) font-size))

        (return)),),))